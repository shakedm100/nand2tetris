// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	Mux16(a=outM, b=instruction, sel=instruction[15], out=afterMux, out[0..2]=jump, out[3..5]=dest, out[6..12]=comp);
	Register(in=afterMux, load=instruction[3], out=ARegister);
	
	//ALU
	Register(in=outM ,load= ,out=DRegister);
	Mux16(a=inM, b=ARegister, sel=instruction[15], out=memoryOrA);
	ALU(x=DRegister ,y=memoryOrA ,zx= ,nx= ,zy= ,ny= ,f= ,no= ,out=outM ,zr= ,ng= );
	
	//Check if going to jump
	Or(a=jump[0], b=jump[1], out=firstAND);
	Or(a=jump[2], b=firstAND, out=ifJump);
	Not(in=ifJump, out=checkJump);
	
	//If checkJump==0 don't jump and inc++
	PC(in=ARegister, inc=checkJump ,load=instruction[15] ,reset=reset, out=pc);
}