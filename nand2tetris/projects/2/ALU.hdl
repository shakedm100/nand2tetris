// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
	//Zero X and then Not X
	Mux16(a=x, b=false, sel=zx, out=afterZeroX);
	Not16(in=afterZeroX, out=afterNotX);
	Mux16(a=afterZeroX, b=afterNotX, sel=nx, out=finishedX);
	
	//Zero Y and then not Y
	Mux16(a=y, b=false, sel=zy, out=afterZeroY);
	Not16(in=afterZeroY, out=afterNotY);
	Mux16(a=afterZeroY, b=afterNotY, sel=ny, out=finishedY);
	
	//Check f flag
	Add16(a=finishedX, b=finishedY, out=xPlusy);
	And16(a=finishedX, b=finishedY, out=xAndy);
	Mux16(a=xAndy, b=xPlusy, sel=f, out=afterF);
	
	//Check no flag
	Not16(in=afterF, out=notAfterF);
	Mux16(a=afterF, b=notAfterF, sel=no, out[15]=checkNG, out[0..14]=dontcare);
	Mux16(a=afterF, b=notAfterF, sel=no, out[0..7]=lower, out[8..15]=higher);

	//Check ng flag
	Mux(a=false, b=true, sel=checkNG, out=ng);
	
	//Check zr flag
	Or8Way(in=lower, out=checkLower);
	Or8Way(in=higher, out=checkHigher);
	Or(a=checkLower, b=checkHigher, out=notZR);
	//If there is 1 in the output the flag needs to be 0,
	//So it is the opposite of the Or
	Not(in=notZR, out=zr);
	
	//Output
	Mux16(a=afterF, b=notAfterF, sel=no, out=out);
}